#+TITLE: Starter Kit JS
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit JS
Java-script Helpers

** Check Dependencies
Determine whether required packages are installed. If not, use ELPA to
install them.
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 
    'js2-mode
    'js2-refactor
    'xref-js2
    'company
    'company-tern
    'nodejs-repl)
#+end_src

#+RESULTS:

** Expresso Mode
#+begin_src emacs-lisp
  (font-lock-add-keywords
   'espresso-mode `(("\\(function *\\)("
                     (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                               "Æ’")
                               nil)))))
#+end_src

#+begin_src emacs-lisp
(font-lock-add-keywords 'espresso-mode
                        '(("\\<\\(FIX\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\):"
                           1 font-lock-warning-face t)))
#+end_src

#+begin_src emacs-lisp
(autoload 'espresso-mode "espresso" "Start espresso-mode" t)
(add-to-list 'auto-mode-alist '("\\.js$" . espresso-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . espresso-mode))
(add-hook 'espresso-mode-hook 'moz-minor-mode)
(add-hook 'espresso-mode-hook 'turn-on-paredit)
(add-hook 'espresso-mode-hook 'run-starter-kit-coding-hook)
;; (add-hook 'espresso-mode-hook 'idle-highlight)
(setq espresso-indent-level 2)
#+end_src

** Pretty Print
#+begin_src emacs-lisp
(defun starter-kit-pp-json ()
  "Pretty-print the json object following point."
  (interactive)
  (require 'json)
  (let ((json-object (save-excursion (json-read))))
    (switch-to-buffer "*json*")
    (delete-region (point-min) (point-max))
    (insert (pp json-object))
    (goto-char (point-min))))
#+end_src
** JS2
#+begin_src emacs-lisp
  (require 'js2-mode)
  (require 'js2-refactor)
  (require 'xref-js2)
  (require 'company)
  (require 'company-tern)
  (require 'nodejs-repl)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  ;; Better imenu
  (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (js2r-add-keybindings-with-prefix "C-c C-r")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

  ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so unbind it.
  (define-key js-mode-map (kbd "M-.") nil)

  (add-hook 'js2-mode-hook (lambda ()
                             (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))

  (add-to-list 'company-backends 'company-tern)
  (add-hook 'js2-mode-hook (lambda ()
                             (tern-mode)
                             (company-mode)))

  ;; Disable completion keybindings, as we use xref-js2 instead
  (define-key tern-mode-keymap (kbd "M-.") nil)
  (define-key tern-mode-keymap (kbd "M-,") nil)

  (add-hook 'js-mode-hook
            (lambda ()
              (define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-expression)
              (define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
              (define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
              (define-key js-mode-map (kbd "C-c C-z")
            'nodejs-repl-switch-to-repl)))
#+end_src


